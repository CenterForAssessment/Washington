
Started abcSGP Wednesday August 07 17:31:21 2024


	abcSGP(
		 sgp_object = Washington_Data_LONG
		state = WA
		steps = c("prepareSGP", "analyzeSGP", "combineSGP", "outputSGP")
		sgp.percentiles = TRUE
		sgp.projections = FALSE
		sgp.projections.lagged = FALSE
		sgp.percentiles.baseline = TRUE
		sgp.projections.baseline = FALSE
		sgp.projections.lagged.baseline = FALSE
		save.intermediate.results = FALSE
		sgPlot.demo.report = TRUE
		sgp.config = WA_Config )


Started prepareSGP Wednesday August 07 17:31:21 2024


	prepareSGP(
		 data = sgp_object
		data_supplementary = data_supplementary
		state = state
		var.names = prepareSGP.var.names
		create.additional.variables = prepareSGP.create.additional.variables
		fix.duplicates = fix.duplicates )

	NOTE: All values of observed data reside within the LOSS/HOSS values in the SGPstateData meta-data for WA.
	NOTE: All values of observed data reside within the BOUNDARY values in the SGPstateData meta-data for WA.
	NOTE: Added variable ACHIEVEMENT_LEVEL to @Data using WA cutscores embedded in SGPstateData.
Finished prepareSGP Wednesday August 07 17:31:26 2024 in 5.447 Seconds 


Started analyzeSGP Wednesday August 07 17:31:26 2024


	analyzeSGP(
		 sgp_object = sgp_object
		state = state
		years = years
		content_areas = content_areas
		grades = grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.minimum.default.panel.years = sgp.minimum.default.panel.years
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		calculate.srs = calculate.srs
		calculate.srs.baseline = calculate.srs.baseline
		goodness.of.fit.print = goodness.of.fit.print
		sgp.config = sgp.config
		parallel.config = parallel.config
		verbose.output = verbose.output
		get.cohort.data.info = get.cohort.data.info
		sgp.sqlite = sgp.sqlite
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )


	NOTE: Baseline coefficient matrices are not available for:
		MATHEMATICS: 4, 5;
		MATHEMATICS: 5, 6;
		MATHEMATICS: 6, 7;
		MATHEMATICS: 7, 8;
		READING: 4, 5;
		READING: 5, 6;
		READING: 6, 7;
		READING: 7, 8.


Started abcSGP Wednesday August 07 17:35:38 2024


	abcSGP(
		 sgp_object = Washington_Data_LONG
		state = WA
		steps = c("prepareSGP", "analyzeSGP", "combineSGP", "outputSGP")
		sgp.percentiles = TRUE
		sgp.projections = FALSE
		sgp.projections.lagged = FALSE
		sgp.percentiles.baseline = TRUE
		sgp.projections.baseline = FALSE
		sgp.projections.lagged.baseline = FALSE
		save.intermediate.results = FALSE
		sgPlot.demo.report = TRUE
		sgp.config = WA_Config )


Started prepareSGP Wednesday August 07 17:35:38 2024


	prepareSGP(
		 data = sgp_object
		data_supplementary = data_supplementary
		state = state
		var.names = prepareSGP.var.names
		create.additional.variables = prepareSGP.create.additional.variables
		fix.duplicates = fix.duplicates )

	NOTE: All values of observed data reside within the LOSS/HOSS values in the SGPstateData meta-data for WA.
	NOTE: All values of observed data reside within the BOUNDARY values in the SGPstateData meta-data for WA.
	NOTE: Added variable ACHIEVEMENT_LEVEL to @Data using WA cutscores embedded in SGPstateData.
Finished prepareSGP Wednesday August 07 17:35:43 2024 in 5.801 Seconds 


Started analyzeSGP Wednesday August 07 17:35:43 2024


	analyzeSGP(
		 sgp_object = sgp_object
		state = state
		years = years
		content_areas = content_areas
		grades = grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.minimum.default.panel.years = sgp.minimum.default.panel.years
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		calculate.srs = calculate.srs
		calculate.srs.baseline = calculate.srs.baseline
		goodness.of.fit.print = goodness.of.fit.print
		sgp.config = sgp.config
		parallel.config = parallel.config
		verbose.output = verbose.output
		get.cohort.data.info = get.cohort.data.info
		sgp.sqlite = sgp.sqlite
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )


Started abcSGP Wednesday August 07 17:39:59 2024


	abcSGP(
		 sgp_object = Washington_Data_LONG
		state = WA
		steps = c("prepareSGP", "analyzeSGP", "combineSGP", "outputSGP")
		sgp.percentiles = TRUE
		sgp.projections = FALSE
		sgp.projections.lagged = FALSE
		sgp.percentiles.baseline = TRUE
		sgp.projections.baseline = FALSE
		sgp.projections.lagged.baseline = FALSE
		save.intermediate.results = FALSE
		sgPlot.demo.report = TRUE
		sgp.config = WA_Config )


Started prepareSGP Wednesday August 07 17:39:59 2024


	prepareSGP(
		 data = sgp_object
		data_supplementary = data_supplementary
		state = state
		var.names = prepareSGP.var.names
		create.additional.variables = prepareSGP.create.additional.variables
		fix.duplicates = fix.duplicates )

	NOTE: All values of observed data reside within the LOSS/HOSS values in the SGPstateData meta-data for WA.
	NOTE: All values of observed data reside within the BOUNDARY values in the SGPstateData meta-data for WA.
	NOTE: Added variable ACHIEVEMENT_LEVEL to @Data using WA cutscores embedded in SGPstateData.
Finished prepareSGP Wednesday August 07 17:40:04 2024 in 4.804 Seconds 


Started analyzeSGP Wednesday August 07 17:40:04 2024


	analyzeSGP(
		 sgp_object = sgp_object
		state = state
		years = years
		content_areas = content_areas
		grades = grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.minimum.default.panel.years = sgp.minimum.default.panel.years
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		calculate.srs = calculate.srs
		calculate.srs.baseline = calculate.srs.baseline
		goodness.of.fit.print = goodness.of.fit.print
		sgp.config = sgp.config
		parallel.config = parallel.config
		verbose.output = verbose.output
		get.cohort.data.info = get.cohort.data.info
		sgp.sqlite = sgp.sqlite
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )


Started abcSGP Wednesday August 07 17:49:27 2024


	abcSGP(
		 sgp_object = Washington_Data_LONG
		state = WA
		steps = c("prepareSGP", "analyzeSGP", "combineSGP", "outputSGP")
		sgp.percentiles = TRUE
		sgp.projections = FALSE
		sgp.projections.lagged = FALSE
		sgp.percentiles.baseline = TRUE
		sgp.projections.baseline = FALSE
		sgp.projections.lagged.baseline = FALSE
		save.intermediate.results = FALSE
		sgPlot.demo.report = TRUE
		sgp.config = WA_Config )


Started prepareSGP Wednesday August 07 17:49:27 2024


	prepareSGP(
		 data = sgp_object
		data_supplementary = data_supplementary
		state = state
		var.names = prepareSGP.var.names
		create.additional.variables = prepareSGP.create.additional.variables
		fix.duplicates = fix.duplicates )

	NOTE: All values of observed data reside within the LOSS/HOSS values in the SGPstateData meta-data for WA.
	NOTE: All values of observed data reside within the BOUNDARY values in the SGPstateData meta-data for WA.
	NOTE: Added variable ACHIEVEMENT_LEVEL to @Data using WA cutscores embedded in SGPstateData.
Finished prepareSGP Wednesday August 07 17:49:32 2024 in 5.423 Seconds 


Started analyzeSGP Wednesday August 07 17:49:32 2024


	analyzeSGP(
		 sgp_object = sgp_object
		state = state
		years = years
		content_areas = content_areas
		grades = grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.minimum.default.panel.years = sgp.minimum.default.panel.years
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		calculate.srs = calculate.srs
		calculate.srs.baseline = calculate.srs.baseline
		goodness.of.fit.print = goodness.of.fit.print
		sgp.config = sgp.config
		parallel.config = parallel.config
		verbose.output = verbose.output
		get.cohort.data.info = get.cohort.data.info
		sgp.sqlite = sgp.sqlite
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )


Started abcSGP Wednesday August 07 17:51:11 2024


	abcSGP(
		 sgp_object = Washington_Data_LONG
		state = WA
		steps = c("prepareSGP", "analyzeSGP", "combineSGP", "outputSGP")
		sgp.percentiles = TRUE
		sgp.projections = FALSE
		sgp.projections.lagged = FALSE
		sgp.percentiles.baseline = TRUE
		sgp.projections.baseline = FALSE
		sgp.projections.lagged.baseline = FALSE
		save.intermediate.results = FALSE
		sgPlot.demo.report = TRUE
		sgp.config = WA_Config )


Started prepareSGP Wednesday August 07 17:51:11 2024


	prepareSGP(
		 data = sgp_object
		data_supplementary = data_supplementary
		state = state
		var.names = prepareSGP.var.names
		create.additional.variables = prepareSGP.create.additional.variables
		fix.duplicates = fix.duplicates )

	NOTE: All values of observed data reside within the LOSS/HOSS values in the SGPstateData meta-data for WA.
	NOTE: All values of observed data reside within the BOUNDARY values in the SGPstateData meta-data for WA.
	NOTE: Added variable ACHIEVEMENT_LEVEL to @Data using WA cutscores embedded in SGPstateData.
Finished prepareSGP Wednesday August 07 17:51:17 2024 in 5.564 Seconds 


Started analyzeSGP Wednesday August 07 17:51:17 2024


	analyzeSGP(
		 sgp_object = sgp_object
		state = state
		years = years
		content_areas = content_areas
		grades = grades
		sgp.percentiles = sgp.percentiles
		sgp.projections = sgp.projections
		sgp.projections.lagged = sgp.projections.lagged
		sgp.percentiles.baseline = sgp.percentiles.baseline
		sgp.projections.baseline = sgp.projections.baseline
		sgp.projections.lagged.baseline = sgp.projections.lagged.baseline
		sgp.minimum.default.panel.years = sgp.minimum.default.panel.years
		sgp.use.my.coefficient.matrices = sgp.use.my.coefficient.matrices
		sgp.test.cohort.size = sgp.test.cohort.size
		return.sgp.test.results = return.sgp.test.results
		simulate.sgps = simulate.sgps
		calculate.simex = calculate.simex
		calculate.simex.baseline = calculate.simex.baseline
		calculate.srs = calculate.srs
		calculate.srs.baseline = calculate.srs.baseline
		goodness.of.fit.print = goodness.of.fit.print
		sgp.config = sgp.config
		parallel.config = parallel.config
		verbose.output = verbose.output
		get.cohort.data.info = get.cohort.data.info
		sgp.sqlite = sgp.sqlite
		sgp.percentiles.equated = sgp.percentiles.equated
		sgp.percentiles.equating.method = sgp.percentiles.equating.method
		sgp.percentiles.calculate.sgps = sgp.percentiles.calculate.sgps
		SGPt = SGPt
		fix.duplicates = fix.duplicates )

	Started studentGrowthPercentiles: Wednesday August 07 17:51:18 2024
		Content Area: READING, Year: 2018_2019, Grade Progression: 6, 7, 8  (N=74,779)
	Finished studentGrowthPercentiles: Wednesday August 07 17:56:22 2024 in 5 Minutes, 3.851 Seconds

	Started studentGrowthPercentiles: Wednesday August 07 17:56:22 2024
		Content Area: READING, Year: 2018_2019, Grade Progression: 5, 6, 7  (N=77,016)
	Finished studentGrowthPercentiles: Wednesday August 07 18:01:41 2024 in 5 Minutes, 18.997 Seconds

	Started studentGrowthPercentiles: Wednesday August 07 18:01:41 2024
		Content Area: READING, Year: 2018_2019, Grade Progression: 4, 5, 6  (N=79,644)
	Finished studentGrowthPercentiles: Wednesday August 07 18:07:18 2024 in 5 Minutes, 37.078 Seconds

	Started studentGrowthPercentiles: Wednesday August 07 18:07:18 2024
		Content Area: READING, Year: 2018_2019, Grade Progression: 3, 4, 5  (N=80,929)
	Finished studentGrowthPercentiles: Wednesday August 07 18:13:03 2024 in 5 Minutes, 44.796 Seconds

	Started studentGrowthPercentiles: Wednesday August 07 18:13:03 2024
		Content Area: READING, Year: 2018_2019, Grade Progression: 3, 4  (N=78,964)
	Finished studentGrowthPercentiles: Wednesday August 07 18:15:32 2024 in 2 Minutes, 29.234 Seconds

	Started studentGrowthPercentiles: Wednesday August 07 18:15:32 2024
		Content Area: MATHEMATICS, Year: 2018_2019, Grade Progression: 6, 7, 8  (N=74,545)
	Finished studentGrowthPercentiles: Wednesday August 07 18:20:38 2024 in 5 Minutes, 5.475 Seconds

	Started studentGrowthPercentiles: Wednesday August 07 18:20:38 2024
		Content Area: MATHEMATICS, Year: 2018_2019, Grade Progression: 5, 6, 7  (N=76,808)
	Finished studentGrowthPercentiles: Wednesday August 07 18:26:15 2024 in 5 Minutes, 37.067 Seconds

	Started studentGrowthPercentiles: Wednesday August 07 18:26:15 2024
		Content Area: MATHEMATICS, Year: 2018_2019, Grade Progression: 4, 5, 6  (N=79,481)
	Finished studentGrowthPercentiles: Wednesday August 07 18:32:02 2024 in 5 Minutes, 46.85 Seconds

	Started studentGrowthPercentiles: Wednesday August 07 18:32:02 2024
		Content Area: MATHEMATICS, Year: 2018_2019, Grade Progression: 3, 4, 5  (N=80,749)
	Finished studentGrowthPercentiles: Wednesday August 07 18:37:37 2024 in 5 Minutes, 34.953 Seconds

	Started studentGrowthPercentiles: Wednesday August 07 18:37:37 2024
		Content Area: MATHEMATICS, Year: 2018_2019, Grade Progression: 3, 4  (N=78,882)
	Finished studentGrowthPercentiles: Wednesday August 07 18:40:11 2024 in 2 Minutes, 34.106 Seconds

	Started studentGrowthPercentiles: Wednesday August 07 18:40:11 2024
		Content Area: READING, Year: 2018_2019, Grade Progression: 6, 7, 8 BASELINE (N=74,779)
	Finished studentGrowthPercentiles: Wednesday August 07 18:40:52 2024 in 40.286 Seconds

	Started studentGrowthPercentiles: Wednesday August 07 18:40:52 2024
		Content Area: READING, Year: 2018_2019, Grade Progression: 5, 6, 7 BASELINE (N=77,016)
	Finished studentGrowthPercentiles: Wednesday August 07 18:41:38 2024 in 45.77 Seconds

	Started studentGrowthPercentiles: Wednesday August 07 18:41:38 2024
		Content Area: READING, Year: 2018_2019, Grade Progression: 4, 5, 6 BASELINE (N=79,644)
	Finished studentGrowthPercentiles: Wednesday August 07 18:42:27 2024 in 48.627 Seconds

	Started studentGrowthPercentiles: Wednesday August 07 18:42:27 2024
		Content Area: READING, Year: 2018_2019, Grade Progression: 3, 4, 5 BASELINE (N=80,929)
	Finished studentGrowthPercentiles: Wednesday August 07 18:43:14 2024 in 47.333 Seconds

	Started studentGrowthPercentiles: Wednesday August 07 18:43:14 2024
		Content Area: READING, Year: 2018_2019, Grade Progression: 3, 4 BASELINE (N=78,964)
	Finished studentGrowthPercentiles: Wednesday August 07 18:43:37 2024 in 22.707 Seconds

	Started studentGrowthPercentiles: Wednesday August 07 18:43:37 2024
		Content Area: MATHEMATICS, Year: 2018_2019, Grade Progression: 6, 7, 8 BASELINE (N=74,545)
	Finished studentGrowthPercentiles: Wednesday August 07 18:44:15 2024 in 37.516 Seconds

	Started studentGrowthPercentiles: Wednesday August 07 18:44:15 2024
		Content Area: MATHEMATICS, Year: 2018_2019, Grade Progression: 5, 6, 7 BASELINE (N=76,808)
	Finished studentGrowthPercentiles: Wednesday August 07 18:44:59 2024 in 43.947 Seconds

	Started studentGrowthPercentiles: Wednesday August 07 18:44:59 2024
		Content Area: MATHEMATICS, Year: 2018_2019, Grade Progression: 4, 5, 6 BASELINE (N=79,481)
	Finished studentGrowthPercentiles: Wednesday August 07 18:45:41 2024 in 42.308 Seconds

	Started studentGrowthPercentiles: Wednesday August 07 18:45:41 2024
		Content Area: MATHEMATICS, Year: 2018_2019, Grade Progression: 3, 4, 5 BASELINE (N=80,749)
	Finished studentGrowthPercentiles: Wednesday August 07 18:46:15 2024 in 34.312 Seconds

	Started studentGrowthPercentiles: Wednesday August 07 18:46:16 2024
		Content Area: MATHEMATICS, Year: 2018_2019, Grade Progression: 3, 4 BASELINE (N=78,882)
	Finished studentGrowthPercentiles: Wednesday August 07 18:46:39 2024 in 23.474 Seconds

Finished analyzeSGP Wednesday August 07 18:46:40 2024 in 55 Minutes, 23.235 Seconds 

Started combineSGP Wednesday August 07 18:46:40 2024
Finished combineSGP Wednesday August 07 18:46:41 2024 in 0.812 Seconds 


Started outputSGP Wednesday August 07 18:46:41 2024: Files produced from outputSGP saved in 'Data'



	outputSGP(
		 sgp_object = sgp_object
		state = state
		output.type = outputSGP.output.type
		outputSGP_SUMMARY.years = years
		outputSGP_SUMMARY.content_areas = content_areas
		outputSGP_INDIVIDUAL.years = years
		outputSGP_INDIVIDUAL.content_areas = content_areas
		outputSGP.student.groups = intersect(names(sgp_object@Data), subset(sgp_object@Names, names.type == "demographic" & names.output == TRUE, select = names.provided, drop = TRUE))
		outputSGP.directory = outputSGP.directory )

	Started LONG data production in outputSGP Wednesday August 07 18:46:41 2024
	Finished LONG data production in outputSGP Wednesday August 07 18:47:15 2024 in 34.471 Seconds 

	Started LONG FINAL YEAR data production in outputSGP Wednesday August 07 18:47:15 2024
	Finished LONG FINAL YEAR data production in outputSGP Wednesday August 07 18:47:28 2024 in 13.175 Seconds 

	Started WIDE data production in outputSGP Wednesday August 07 18:47:28 2024
	Finished WIDE data production in outputSGP Wednesday August 07 18:48:12 2024 in 43.528 Seconds 

Finished outputSGP Wednesday August 07 18:48:12 2024 in 1 Minute, 31.18 Seconds 

Finished abcSGP Wednesday August 07 18:48:12 2024 in 57 Minutes, 0.821 Seconds 

